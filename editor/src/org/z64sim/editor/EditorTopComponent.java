/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.z64sim.editor;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.IOException;
import java.util.Arrays;
import java.util.Set;
import javax.swing.JEditorPane;
import javax.swing.text.StyledDocument;
import org.openide.cookies.EditorCookie;
import org.openide.text.Line;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Task;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        iconBase = "org/z64sim/editor/editor.png",
        persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED
)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EditorAction",
        preferredID = "EditorTopComponent"
)
@Messages({
    "CTL_EditorAction=Editor",
    "CTL_EditorTopComponent=Editor - ",
    "HINT_EditorTopComponent=Code Editor Window"
})
public final class EditorTopComponent extends TopComponent {

    Set<z64docDataObject> uniqueAsmFiles = EditorUtilities.uniqueAsmFiles;
    private final z64docDataObject f;
    
    public EditorTopComponent() {
        this.f = null;
        
        initComponents();        
        setUpFont();

        // Enable printing the source code
        codeEditor.putClientProperty("print.printable", Boolean.TRUE); // NOI18N
        codeEditor.putClientProperty("print.name", "new File"); // NOI18N
        codeEditor.putClientProperty("print.size", new Dimension(10, 10)); // NOI18N
        
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());
    }
    
    public EditorTopComponent(z64docDataObject f) {
        this.f = f;
        
        initComponents();        
        setUpFont();
        loadFile();

        // Enable printing the source code
        codeEditor.putClientProperty("print.printable", Boolean.TRUE); // NOI18N
        codeEditor.putClientProperty("print.name", "new File"); // NOI18N
        codeEditor.putClientProperty("print.size", new Dimension(10, 10)); // NOI18N
        
        setToolTipText(Bundle.HINT_EditorTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        codeEditor = new javax.swing.JEditorPane();

        scrollPane.setViewportView(codeEditor);
        // Insert line numbers
        TextLineNumber tln = new TextLineNumber(codeEditor);
        scrollPane.setRowHeaderView(tln);

        // Connect the codeEditor with the syntax highlighter component
        codeEditor.setContentType("text/z64asm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane codeEditor;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        uniqueAsmFiles.remove(f);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void setUpFont() {
        Font f = null;
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fonts = ge.getAvailableFontFamilyNames();
        Arrays.sort(fonts);
        if (Arrays.binarySearch(fonts, "Courier New") >= 0) {
            f = new Font("Courier New", Font.PLAIN, 14);
        } else if (Arrays.binarySearch(fonts, "Courier") >= 0) {
            f = new Font("Courier", Font.PLAIN, 14);
        } else if (Arrays.binarySearch(fonts, "Monospaced") >= 0) {
            f = new Font("Monospaced", Font.PLAIN, 14);
        }

        if (null != f) {
            codeEditor.setFont(f);
        }
    }

    private void loadFile() {
        try {
            this.codeEditor.setText(this.f.files().iterator().next().asText());
            setName(Bundle.CTL_EditorTopComponent() + this.f.files().iterator().next().getNameExt());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

}
