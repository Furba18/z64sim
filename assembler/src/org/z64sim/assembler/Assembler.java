/* Assembler.java */
/* Generated By:JavaCC: Do not edit this line. Assembler.java */
package org.z64sim.assembler;

public class Assembler implements AssemblerConstants {

    public static void run() {
    }

/****************
 * PARSER RULES *
 ****************/
  final public 

void Program() throws ParseException {
    jj_consume_token(PROGRAM_BEGIN);
    label_1:
    while (true) {
      Instruction();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSN_0:
      case INSN_0_NOSUFF:
      case INSN_1_S:
      case INSN_1_E:{
        ;
        break;
        }
      default:
        break label_1;
      }
    }
    jj_consume_token(PROGRAM_END);
    jj_consume_token(0);
  }

  final public void Instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSN_0:{
      jj_consume_token(INSN_0);
      break;
      }
    case INSN_0_NOSUFF:{
      jj_consume_token(INSN_0_NOSUFF);
      break;
      }
    case INSN_1_S:{
      jj_consume_token(INSN_1_S);
      jj_consume_token(NUMBER);
      break;
      }
    case INSN_1_E:{
      jj_consume_token(INSN_1_E);
      FormatE();
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Register() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_8:{
      jj_consume_token(REG_8);
      break;
      }
    case REG_16:{
      jj_consume_token(REG_16);
      break;
      }
    case REG_32:{
      jj_consume_token(REG_32);
      break;
      }
    case REG_64:{
      jj_consume_token(REG_64);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Memory() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTANT:{
      jj_consume_token(CONSTANT);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 20:{
      jj_consume_token(20);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        jj_consume_token(REG_8);
        break;
        }
      case REG_16:{
        jj_consume_token(REG_16);
        break;
        }
      case REG_32:{
        jj_consume_token(REG_32);
        break;
        }
      case REG_64:{
        jj_consume_token(REG_64);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(21);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        jj_consume_token(REG_8);
        break;
        }
      case REG_16:{
        jj_consume_token(REG_16);
        break;
        }
      case REG_32:{
        jj_consume_token(REG_32);
        break;
        }
      case REG_64:{
        jj_consume_token(REG_64);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(21);
      jj_consume_token(SCALE);
      jj_consume_token(22);
      break;
      }
    default:
      ;
    }
  }

  final public void FormatE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_8:
    case REG_16:
    case REG_32:
    case REG_64:{
      Register();
      break;
      }
    case CONSTANT:{
      jj_consume_token(CONSTANT);
      break;
      }
    default:
      Memory();
    }
  }

  /** Generated Token Manager. */
  public AssemblerTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public Assembler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assembler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssemblerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public Assembler(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AssemblerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assembler(AssemblerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssemblerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
