/* Assembler.java */
/* Generated By:JavaCC: Do not edit this line. Assembler.java */
package org.z64sim.assembler;
import java.io.StringReader;
import java.io.Reader;

public class Assembler implements AssemblerConstants {

    /**
     * A String-based constructor for ease of use
     */
    public Assembler(String s) {
        this((Reader)(new StringReader(s)));
    }

/****************
 * PARSER RULES *
 ****************/
  final public 

void Program() throws ParseException {
    jj_consume_token(PROGRAM_BEGIN);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LABEL:{
        Label();
        break;
        }
      case INSN_0:
      case INSN_0_WQ:
      case INSN_0_NOSUFF:
      case INSN_1_S:
      case INSN_1_E:
      case INSN_SHIFT:
      case INSN_1_M:
      case INSN_JC:
      case INSN_B_E:
      case INSN_EXT:
      case INSN_IN:
      case INSN_OUT:
      case INSN_IO_S:{
        Instruction();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSN_0:
      case INSN_0_WQ:
      case INSN_0_NOSUFF:
      case INSN_1_S:
      case INSN_1_E:
      case INSN_SHIFT:
      case INSN_1_M:
      case INSN_JC:
      case INSN_B_E:
      case INSN_EXT:
      case INSN_IN:
      case INSN_OUT:
      case INSN_IO_S:
      case LABEL:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(PROGRAM_END);
    jj_consume_token(0);
  }

  final public void Instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSN_0:{
      jj_consume_token(INSN_0);
      break;
      }
    case INSN_0_WQ:{
      jj_consume_token(INSN_0_WQ);
      break;
      }
    case INSN_0_NOSUFF:{
      jj_consume_token(INSN_0_NOSUFF);
      break;
      }
    case INSN_1_S:{
      jj_consume_token(INSN_1_S);
      jj_consume_token(NUMBER);
      break;
      }
    case INSN_1_E:{
      jj_consume_token(INSN_1_E);
      FormatE();
      break;
      }
    case INSN_SHIFT:{
      jj_consume_token(INSN_SHIFT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        FormatK();
        jj_consume_token(38);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      FormatG();
      break;
      }
    case INSN_1_M:{
      jj_consume_token(INSN_1_M);
      FormatM();
      break;
      }
    case INSN_JC:{
      jj_consume_token(INSN_JC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        FormatM();
        break;
        }
      case 39:{
        jj_consume_token(39);
        FormatG();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case INSN_B_E:{
      jj_consume_token(INSN_B_E);
      FormatB();
      jj_consume_token(38);
      FormatE();
      break;
      }
    case INSN_EXT:{
      jj_consume_token(INSN_EXT);
      FormatE();
      jj_consume_token(38);
      FormatG();
      break;
      }
    case INSN_IN:{
      jj_consume_token(INSN_IN);
      jj_consume_token(REG_16);
      jj_consume_token(38);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        jj_consume_token(REG_8);
        break;
        }
      case REG_16:{
        jj_consume_token(REG_16);
        break;
        }
      case REG_32:{
        jj_consume_token(REG_32);
        break;
        }
      case REG_64:{
        jj_consume_token(REG_64);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case INSN_OUT:{
      jj_consume_token(INSN_OUT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        jj_consume_token(REG_8);
        break;
        }
      case REG_16:{
        jj_consume_token(REG_16);
        break;
        }
      case REG_32:{
        jj_consume_token(REG_32);
        break;
        }
      case REG_64:{
        jj_consume_token(REG_64);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(38);
      jj_consume_token(REG_16);
      break;
      }
    case INSN_IO_S:{
      jj_consume_token(INSN_IO_S);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Label() throws ParseException {
    jj_consume_token(LABEL);
  }

  final public void Register() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_8:{
      jj_consume_token(REG_8);
      break;
      }
    case REG_16:{
      jj_consume_token(REG_16);
      break;
      }
    case REG_32:{
      jj_consume_token(REG_32);
      break;
      }
    case REG_64:{
      jj_consume_token(REG_64);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Addressing() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTANT:{
      jj_consume_token(CONSTANT);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        jj_consume_token(REG_8);
        break;
        }
      case REG_16:{
        jj_consume_token(REG_16);
        break;
        }
      case REG_32:{
        jj_consume_token(REG_32);
        break;
        }
      case REG_64:{
        jj_consume_token(REG_64);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(38);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        jj_consume_token(REG_8);
        break;
        }
      case REG_16:{
        jj_consume_token(REG_16);
        break;
        }
      case REG_32:{
        jj_consume_token(REG_32);
        break;
        }
      case REG_64:{
        jj_consume_token(REG_64);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(38);
      jj_consume_token(SCALE);
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void FormatE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_8:
    case REG_16:
    case REG_32:
    case REG_64:{
      Register();
      break;
      }
    case CONSTANT:{
      jj_consume_token(CONSTANT);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      Addressing();
    }
  }

  final public void FormatK() throws ParseException {
    jj_consume_token(40);
  }

  final public void FormatG() throws ParseException {
    jj_consume_token(40);
  }

/* Both label and direct address */
  final public void FormatM() throws ParseException {
    jj_consume_token(40);
  }

  final public void FormatB() throws ParseException {
    jj_consume_token(40);
  }

  /** Generated Token Manager. */
  public AssemblerTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7ffe0000,0x7ffe0000,0x0,0x0,0x1e000,0x1e000,0x3ffe0000,0x1e000,0x200,0x1e000,0x1e000,0x0,0x1e200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,};
   }

  /** Constructor with InputStream. */
  public Assembler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assembler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssemblerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Assembler(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AssemblerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assembler(AssemblerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssemblerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
