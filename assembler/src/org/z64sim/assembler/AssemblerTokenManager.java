/* AssemblerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AssemblerTokenManager.java */
package org.z64sim.assembler;

/** Token Manager. */
@SuppressWarnings("unused")public class AssemblerTokenManager implements AssemblerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000L) != 0L)
            return 64;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 166;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 20);
      case 41:
         return jjStopAtPos(0, 22);
      case 44:
         return jjStopAtPos(0, 21);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x30L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(2, 17);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(3, 5);
         break;
      case 71:
      case 103:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(3, 4);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 166;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 37)
                     { jjAddStates(0, 35); }
                  else if (curChar == 36)
                     { jjCheckNAddTwoStates(7, 10); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(36, 38); }
                  if ((0x116000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(36, 38); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x116000000000000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(7, 10); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(7); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(11); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 89:
                  if (curChar == 37)
                     { jjAddStates(0, 35); }
                  break;
               case 144:
                  if (curChar == 56 && kind > 14)
                     kind = 14;
                  break;
               case 146:
                  if (curChar == 57 && kind > 14)
                     kind = 14;
                  break;
               case 148:
                  if (curChar == 48 && kind > 14)
                     kind = 14;
                  break;
               case 149:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 151:
                  if (curChar == 49 && kind > 14)
                     kind = 14;
                  break;
               case 152:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 154:
                  if (curChar == 50 && kind > 14)
                     kind = 14;
                  break;
               case 155:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 157:
                  if (curChar == 51 && kind > 14)
                     kind = 14;
                  break;
               case 158:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 160:
                  if (curChar == 52 && kind > 14)
                     kind = 14;
                  break;
               case 161:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 163:
                  if (curChar == 53 && kind > 14)
                     kind = 14;
                  break;
               case 164:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 166:
                  if ((0x82100400821004L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 0:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(39, 42); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(43, 50); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjAddStates(51, 53); }
                  else if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(54, 58); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(59, 68); }
                  else if ((0x800000008000L & l) != 0L)
                     { jjAddStates(69, 70); }
                  else if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 64:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 1:
                  { jjAddStates(36, 38); }
                  break;
               case 8:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x82100400821004L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 17:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x10000000100000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 22:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 23:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x1000000010000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 25:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 26:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x82100400821004L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 29:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 30:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x800000008000L & l) != 0L)
                     { jjAddStates(69, 70); }
                  break;
               case 32:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 33:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 35:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 36:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(59, 68); }
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 39:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x800000008L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 42:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 43:
                  if ((0x400000004000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 44:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(43); }
                  break;
               case 45:
                  if ((0x8000000080000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 46:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 47:
                  if ((0x20000000200L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 48:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(47); }
                  break;
               case 49:
                  if ((0x1000000010L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 50:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 51:
                  if ((0x800000008000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 52:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(51); }
                  break;
               case 53:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 54:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 55:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 56:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(54, 58); }
                  break;
               case 57:
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 59:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 60:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 61:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 62:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 63:
                  if ((0x20000000200L & l) != 0L)
                     { jjAddStates(51, 53); }
                  break;
               case 65:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 67:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(43, 50); }
                  break;
               case 69:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 70:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 71:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(43); }
                  break;
               case 72:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 73:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(47); }
                  break;
               case 74:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 75:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(51); }
                  break;
               case 76:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 77:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(39, 42); }
                  break;
               case 79:
                  if ((0x4000000040L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 80:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(79); }
                  break;
               case 81:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(79); }
                  break;
               case 84:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 86:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 90:
                  if ((0x100000001000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 91:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(90); }
                  break;
               case 92:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(90); }
                  break;
               case 93:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(90); }
                  break;
               case 94:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(90); }
                  break;
               case 95:
                  if ((0x100000001000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 96:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(95); }
                  break;
               case 97:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(95); }
                  break;
               case 98:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(95); }
                  break;
               case 99:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(95); }
                  break;
               case 100:
                  if ((0x1000000010000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 101:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(100); }
                  break;
               case 102:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(100); }
                  break;
               case 103:
                  if ((0x20000000200L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 104:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(103); }
                  break;
               case 105:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(103); }
                  break;
               case 106:
                  if ((0x100000001000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 107:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(106); }
                  break;
               case 108:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(106); }
                  break;
               case 110:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(106); }
                  break;
               case 112:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(106); }
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x1000000010000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 116:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 117:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 119:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x20000000200L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 121:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(120); }
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(120); }
                  break;
               case 124:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x100000001000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 126:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(125); }
                  break;
               case 127:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(125); }
                  break;
               case 129:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(125); }
                  break;
               case 131:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(125); }
                  break;
               case 133:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x1000000010000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 135:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(134); }
                  break;
               case 136:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(134); }
                  break;
               case 138:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x20000000200L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 140:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(139); }
                  break;
               case 141:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(139); }
                  break;
               case 143:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 150:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 153:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 156:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 159:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 162:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 165:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(36, 38); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 166 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
static final int[] jjnextStates = {
   91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 105, 108, 110, 112, 114, 
   117, 119, 122, 124, 127, 129, 131, 133, 136, 138, 141, 143, 145, 147, 150, 153, 
   156, 159, 162, 165, 1, 2, 4, 82, 84, 87, 88, 69, 70, 71, 72, 73, 
   74, 75, 77, 64, 65, 67, 57, 59, 60, 61, 62, 39, 41, 42, 44, 46, 
   48, 50, 52, 54, 55, 33, 36, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\50", "\54", "\51", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      debugStream.println("Returning the <EOF> token.\n");
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
   {
      debugStream.println("Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
         curChar = input_stream.BeginToken();
   }
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
      {
         debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
         input_stream.backup(curPos - jjmatchedPos - 1);
      }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 1 },
   { 2 },
   { 3 },
   { 4 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 7 },
   { 8 },
   { 9 },
   { 10 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 12 },
   { 13 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 15 },
   { 34, 16, },
   { 17 },
   { 18 },
   { 19 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 21 },
   { 22 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 24 },
   { 25 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 27 },
   { 28 },
   { 29 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 32 },
   { 33 },
   { 34, 16, },
   { 35 },
   { 36 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 38 },
   { 39 },
   { 40 },
   { 41 },
   { 42 },
   { 43 },
   { 44 },
   { 45 },
   { 46 },
   { 47 },
   { 48 },
   { 49 },
   { 50 },
   { 51 },
   { 52 },
   { 53 },
   { 54 },
   { 55 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 57 },
   { 58 },
   { 59 },
   { 60 },
   { 61 },
   { 62 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 64, 65, 67, },
   { 64, 65, 67, },
   { 66 },
   { 64, 65, 67, },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 69 },
   { 70 },
   { 71 },
   { 72 },
   { 73 },
   { 74 },
   { 75 },
   { 76 },
   { 77 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 79 },
   { 80 },
   { 81 },
   { 82 },
   { 83 },
   { 84 },
   { 85 },
   { 86 },
   { 87 },
   { 88 },
   { 0, 5, 6, 11, 14, 20, 23, 26, 30, 31, 37, 56, 63, 68, 78, 89, },
   { 90 },
   { 91 },
   { 92 },
   { 93 },
   { 94 },
   { 95 },
   { 96 },
   { 97 },
   { 98 },
   { 99 },
   { 100 },
   { 101 },
   { 102 },
   { 103 },
   { 104 },
   { 105 },
   { 106 },
   { 107 },
   { 108 },
   { 109 },
   { 110 },
   { 111 },
   { 112 },
   { 113 },
   { 114 },
   { 115 },
   { 116 },
   { 117 },
   { 118 },
   { 119 },
   { 120 },
   { 121 },
   { 122 },
   { 123 },
   { 124 },
   { 125 },
   { 126 },
   { 127 },
   { 128 },
   { 129 },
   { 130 },
   { 131 },
   { 132 },
   { 133 },
   { 134 },
   { 135 },
   { 136 },
   { 137 },
   { 138 },
   { 139 },
   { 140 },
   { 141 },
   { 142 },
   { 143 },
   { 144 },
   { 145 },
   { 146 },
   { 147 },
   { 148 },
   { 149 },
   { 150 },
   { 151 },
   { 152 },
   { 153 },
   { 154 },
   { 155 },
   { 156 },
   { 157 },
   { 158 },
   { 159 },
   { 160 },
   { 161 },
   { 162 },
   { 163 },
   { 164 },
   { 165 },
   { 34, 16, },
},

};
protected static final int[][] kindForState = {
{ 
  3, 
  3, 
  3, 
  3, 
  3, 
  6, 
  7, 
  7, 
  7, 
  7, 
  7, 
  8, 
  8, 
  8, 
  8, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  18, 
  18, 
  18, 
  18, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  18, 
  18, 
  18, 
  16, 
  16, 
  18, 
  18, 
  18, 
  18, 
  18, 
  16, 
  15, 
  15, 
  16, 
  16, 
  18, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  18, 
  18, 
  18, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  18, 
  18, 
  18, 
  18, 
  14, 
  11, 
  11, 
  11, 
  11, 
  11, 
  12, 
  12, 
  12, 
  12, 
  12, 
  12, 
  12, 
  12, 
  12, 
  12, 
  12, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  13, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, }
};
  int kindCnt = 0;
  protected final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }


  protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[23];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }


private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AssemblerTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public AssemblerTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 166; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x77f9f1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0x8L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[166];
    private final int[] jjstateSet = new int[2 * 166];

    
    protected char curChar;
}
