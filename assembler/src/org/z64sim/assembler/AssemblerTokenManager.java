/* AssemblerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AssemblerTokenManager.java */
package org.z64sim.assembler;
import java.io.StringReader;
import java.io.Reader;

/** Token Manager. */
@SuppressWarnings("unused")public class AssemblerTokenManager implements AssemblerConstants {
    static void CommonTokenAction(Token t)
    {
        AsmToken token = (AsmToken)t;
        token.start = input_stream.tokenBegin;
        token.length = input_stream.bufpos - token.start;
        token.token = t;
    }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000L) != 0L)
            return 84;
         return -1;
      case 1:
         if ((active0 & 0x100000L) != 0L)
            return 89;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 34);
      case 46:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0xc0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(2, 20);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(3, 7);
         break;
      case 71:
      case 103:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 227;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 37)
                     { jjAddStates(0, 35); }
                  else if (curChar == 36)
                     { jjCheckNAddTwoStates(7, 10); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(36, 38); }
                  if ((0x116000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(36, 38); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x116000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 6:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(7, 10); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(7); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(11); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 150:
                  if (curChar == 37)
                     { jjAddStates(0, 35); }
                  break;
               case 205:
                  if (curChar == 56 && kind > 16)
                     kind = 16;
                  break;
               case 207:
                  if (curChar == 57 && kind > 16)
                     kind = 16;
                  break;
               case 209:
                  if (curChar == 48 && kind > 16)
                     kind = 16;
                  break;
               case 210:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 212:
                  if (curChar == 49 && kind > 16)
                     kind = 16;
                  break;
               case 213:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 215:
                  if (curChar == 50 && kind > 16)
                     kind = 16;
                  break;
               case 216:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 218:
                  if (curChar == 51 && kind > 16)
                     kind = 16;
                  break;
               case 219:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 221:
                  if (curChar == 52 && kind > 16)
                     kind = 16;
                  break;
               case 222:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 224:
                  if (curChar == 53 && kind > 16)
                     kind = 16;
                  break;
               case 225:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 84:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(90); }
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 0:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(39, 42); }
                  else if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddStates(43, 47); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(48, 56); }
                  else if ((0x40000000400L & l) != 0L)
                     { jjCheckNAddStates(57, 67); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(68, 70); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjAddStates(71, 75); }
                  else if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(76, 79); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(80, 93); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(94, 97); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(98, 100); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 89:
                  if ((0x82100400821004L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if ((0x82100400821004L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 1:
                  { jjAddStates(36, 38); }
                  break;
               case 8:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0x10000000100000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 16:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 17:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x82100400821004L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 20:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(98, 100); }
                  break;
               case 27:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 28:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 29:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 30:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 32:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(94, 97); }
                  break;
               case 33:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 34:
                  if ((0x82100400821004L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 35:
                  if ((0x40000000400000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 36:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x40000000400000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAddStates(101, 103); }
                  break;
               case 40:
                  if ((0x2000000020000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 41:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 42:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 43:
                  if ((0x80000000800000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 44:
                  if ((0x100000001000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 45:
                  if ((0x80000000800000L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 40); }
                  break;
               case 46:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 47:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(101, 103); }
                  break;
               case 49:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(80, 93); }
                  break;
               case 52:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 53:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x800000008L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 55:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 56:
                  if ((0x1000000010000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 57:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 58:
                  if ((0x400000004000000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 59:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 60:
                  if ((0x8000000080000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 61:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 62:
                  if ((0x20000000200L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 63:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 64:
                  if ((0x1000000010L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 65:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(64); }
                  break;
               case 66:
                  if ((0x800000008000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 67:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(66); }
                  break;
               case 68:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x82100400821004L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 70:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(68); }
                  break;
               case 71:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(68); }
                  break;
               case 72:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 73:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(72); }
                  break;
               case 74:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(72); }
                  break;
               case 75:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 76:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(75); }
                  break;
               case 77:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(75); }
                  break;
               case 78:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(76, 79); }
                  break;
               case 79:
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 80:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(68); }
                  break;
               case 81:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(68); }
                  break;
               case 82:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(72); }
                  break;
               case 83:
                  if ((0x20000000200L & l) != 0L)
                     { jjAddStates(71, 75); }
                  break;
               case 85:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 87:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 90:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x82100400821004L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 92:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(90); }
                  break;
               case 93:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(68, 70); }
                  break;
               case 94:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 95:
                  if ((0x8000000080L & l) != 0L)
                     { jjCheckNAdd(96); }
                  break;
               case 96:
                  if ((0x82100400821004L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 98:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(96); }
                  break;
               case 99:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x40000000400L & l) != 0L)
                     { jjCheckNAddStates(57, 67); }
                  break;
               case 101:
                  if ((0x800000008L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 102:
                  if ((0x1000000010000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 103:
                  if ((0x400000004000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 104:
                  if ((0x8000000080000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 105:
                  if ((0x800000008000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 106:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 107:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(102); }
                  break;
               case 108:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(103); }
                  break;
               case 109:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 110:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(105); }
                  break;
               case 111:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 112:
                  if ((0x82100400821004L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 113:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 114:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(48, 56); }
                  break;
               case 115:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 116:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 117:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 118:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 119:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 120:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(64); }
                  break;
               case 121:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(66); }
                  break;
               case 122:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 123:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 126:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddStates(43, 47); }
                  break;
               case 128:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 129:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 131:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x82100400821004L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 134:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 135:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(90); }
                  break;
               case 136:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(39, 42); }
                  break;
               case 138:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 139:
                  if ((0x82000000820000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 140:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(138); }
                  break;
               case 141:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(138); }
                  break;
               case 144:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(96); }
                  break;
               case 146:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(96); }
                  break;
               case 149:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 151:
                  if ((0x100000001000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 152:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(151); }
                  break;
               case 153:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(151); }
                  break;
               case 154:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(151); }
                  break;
               case 155:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(151); }
                  break;
               case 156:
                  if ((0x100000001000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 157:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(156); }
                  break;
               case 158:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(156); }
                  break;
               case 159:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(156); }
                  break;
               case 160:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(156); }
                  break;
               case 161:
                  if ((0x1000000010000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 162:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(161); }
                  break;
               case 163:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(161); }
                  break;
               case 164:
                  if ((0x20000000200L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 165:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(164); }
                  break;
               case 166:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(164); }
                  break;
               case 167:
                  if ((0x100000001000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 168:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(167); }
                  break;
               case 169:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(167); }
                  break;
               case 171:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(167); }
                  break;
               case 173:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(167); }
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x1000000010000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 177:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(176); }
                  break;
               case 178:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(176); }
                  break;
               case 180:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x20000000200L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 182:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(181); }
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(181); }
                  break;
               case 185:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x100000001000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 187:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 188:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 190:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 192:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 194:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x1000000010000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 196:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(195); }
                  break;
               case 197:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(195); }
                  break;
               case 199:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x20000000200L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 201:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(200); }
                  break;
               case 202:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(200); }
                  break;
               case 204:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 206:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 208:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 211:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 214:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 217:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 220:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 223:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 226:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(36, 38); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 227 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
static final int[] jjnextStates = {
   152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 169, 171, 173, 175, 
   178, 180, 183, 185, 188, 190, 192, 194, 197, 199, 202, 204, 206, 208, 211, 214, 
   217, 220, 223, 226, 1, 2, 4, 142, 144, 147, 149, 129, 131, 23, 134, 136, 
   115, 116, 117, 118, 119, 120, 121, 124, 126, 101, 102, 103, 104, 105, 106, 107, 
   108, 109, 110, 113, 94, 97, 99, 84, 85, 87, 88, 92, 79, 80, 81, 82, 
   53, 55, 57, 59, 61, 63, 65, 67, 70, 71, 73, 74, 76, 77, 36, 38, 
   47, 50, 28, 30, 31, 41, 42, 45, 43, 44, 40, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\54", "\52", "\50", "\51", "\56", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      debugStream.println("Returning the <EOF> token.\n");
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
   {
      debugStream.println("Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
         curChar = input_stream.BeginToken();
   }
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
      {
         debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
         input_stream.backup(curPos - jjmatchedPos - 1);
      }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 1 },
   { 2 },
   { 3 },
   { 4 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 7 },
   { 8 },
   { 9 },
   { 10 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 12 },
   { 13 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 15 },
   { 16 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 18 },
   { 19 },
   { 20 },
   { 21 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 23 },
   { 24 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 27 },
   { 28 },
   { 29 },
   { 30 },
   { 31 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 33, 34, 89, 90, },
   { 33, 34, 89, 90, },
   { 35 },
   { 36 },
   { 37 },
   { 38 },
   { 39 },
   { 40 },
   { 41 },
   { 42 },
   { 43 },
   { 44 },
   { 45 },
   { 46 },
   { 47 },
   { 48 },
   { 49 },
   { 50 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 52 },
   { 53 },
   { 54 },
   { 55 },
   { 56 },
   { 57 },
   { 58 },
   { 59 },
   { 60 },
   { 61 },
   { 62 },
   { 63 },
   { 64 },
   { 65 },
   { 66 },
   { 67 },
   { 68 },
   { 69 },
   { 70 },
   { 71 },
   { 72 },
   { 73 },
   { 74 },
   { 75 },
   { 76 },
   { 77 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 79 },
   { 80 },
   { 81 },
   { 82 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 84, 85, 87, 88, 92, },
   { 84, 85, 87, 88, 92, },
   { 86 },
   { 84, 85, 87, 88, 92, },
   { 84, 85, 87, 88, 92, },
   { 33, 34, 89, 90, },
   { 33, 34, 89, 90, },
   { 91 },
   { 84, 85, 87, 88, 92, },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 94 },
   { 95 },
   { 96 },
   { 97 },
   { 98 },
   { 99 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 101 },
   { 102 },
   { 103 },
   { 104 },
   { 105 },
   { 106 },
   { 107 },
   { 108 },
   { 109 },
   { 110 },
   { 111 },
   { 112 },
   { 113 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 115 },
   { 116 },
   { 117 },
   { 118 },
   { 119 },
   { 120 },
   { 121 },
   { 122 },
   { 123 },
   { 124 },
   { 125 },
   { 126 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 128 },
   { 129 },
   { 130 },
   { 131 },
   { 132 },
   { 133 },
   { 134 },
   { 135 },
   { 136 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 138 },
   { 139 },
   { 140 },
   { 141 },
   { 142 },
   { 143 },
   { 144 },
   { 145 },
   { 146 },
   { 147 },
   { 148 },
   { 149 },
   { 0, 5, 6, 11, 14, 17, 22, 25, 26, 32, 51, 78, 83, 93, 100, 114, 127, 137, 150, },
   { 151 },
   { 152 },
   { 153 },
   { 154 },
   { 155 },
   { 156 },
   { 157 },
   { 158 },
   { 159 },
   { 160 },
   { 161 },
   { 162 },
   { 163 },
   { 164 },
   { 165 },
   { 166 },
   { 167 },
   { 168 },
   { 169 },
   { 170 },
   { 171 },
   { 172 },
   { 173 },
   { 174 },
   { 175 },
   { 176 },
   { 177 },
   { 178 },
   { 179 },
   { 180 },
   { 181 },
   { 182 },
   { 183 },
   { 184 },
   { 185 },
   { 186 },
   { 187 },
   { 188 },
   { 189 },
   { 190 },
   { 191 },
   { 192 },
   { 193 },
   { 194 },
   { 195 },
   { 196 },
   { 197 },
   { 198 },
   { 199 },
   { 200 },
   { 201 },
   { 202 },
   { 203 },
   { 204 },
   { 205 },
   { 206 },
   { 207 },
   { 208 },
   { 209 },
   { 210 },
   { 211 },
   { 212 },
   { 213 },
   { 214 },
   { 215 },
   { 216 },
   { 217 },
   { 218 },
   { 219 },
   { 220 },
   { 221 },
   { 222 },
   { 223 },
   { 224 },
   { 225 },
   { 226 },
},

};
protected static final int[][] kindForState = {
{ 
  5, 
  5, 
  5, 
  5, 
  5, 
  8, 
  9, 
  9, 
  9, 
  9, 
  9, 
  10, 
  10, 
  10, 
  10, 
  19, 
  19, 
  19, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  25, 
  17, 
  17, 
  17, 
  17, 
  17, 
  25, 
  25, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  26, 
  17, 
  17, 
  17, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  22, 
  22, 
  22, 
  22, 
  22, 
  22, 
  22, 
  25, 
  25, 
  25, 
  19, 
  19, 
  22, 
  22, 
  22, 
  19, 
  17, 
  17, 
  19, 
  19, 
  27, 
  27, 
  29, 
  29, 
  29, 
  19, 
  19, 
  21, 
  21, 
  21, 
  21, 
  21, 
  24, 
  23, 
  23, 
  23, 
  23, 
  23, 
  23, 
  23, 
  23, 
  23, 
  23, 
  24, 
  24, 
  24, 
  24, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  19, 
  24, 
  24, 
  24, 
  25, 
  25, 
  25, 
  17, 
  17, 
  17, 
  17, 
  28, 
  28, 
  28, 
  29, 
  29, 
  21, 
  18, 
  18, 
  18, 
  18, 
  18, 
  18, 
  18, 
  21, 
  21, 
  21, 
  21, 
  21, 
  16, 
  13, 
  13, 
  13, 
  13, 
  13, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  14, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  15, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, 
  16, }
};
  static int kindCnt = 0;
  protected static final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }


  protected static final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[39];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }


static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AssemblerTokenManager(JavaCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public AssemblerTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 227; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7c3fffe7c1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x20L, 
};
    static protected JavaCharStream  input_stream;

    static private final int[] jjrounds = new int[227];
    static private final int[] jjstateSet = new int[2 * 227];

    
    static protected char curChar;
}
